import sys

C_TEXT = """#include "overflow.h"
#include <limits.h>
#include <stddef.h>
#include <stdint.h>

/* This file is autogenerated by pemutils/scripts/overflow_gen.py
 * All edits will be deleted. */

%s"""

def c_text(funcs):
    return C_TEXT % ("\n\n".join(funcs))

ADD_SIGNED_BODY = """    if ((x <= 0 && y >= 0) || (x >= 0 && y <= 0)) {
        return false;
    } else if (x > 0) {
        return x > %s - y;
    } else {
        return x < %s - y;
    }"""

def add_signed_body(min_name, max_name):
    return ADD_SIGNED_BODY % (max_name, min_name)

ADD_UNSIGNED_BODY = "    return x > %s - y;"

def add_unsigned_body(min_name, max_name):
    return ADD_UNSIGNED_BODY % max_name

ADD_FUNCTION_WRAPPER = """bool add_overflow_%s(%s x, %s y) {
%s
}"""

# THe C99 standard specifies that this is okay to do.
MULT_BODY = "return x != 0 && (x * y) / x != y;"

MULT_FUNCTION_WRAPPER = """bool mult_overflow_%s(%s x, %s y) {
%s
}"""

def add_function_wrapper(var_name, type_name, body):
    return MULT_FUNCTION_WRAPPER % (var_name, type_name, type_name, MULT_BODY)

H_TEXT ="""#ifndef PEMUTIL_OVERFLOW_H_
#define PEMUTIL_OVERFLOW_H_

#include <stdbool.h>
#include <stdint.h>
#include <stddef.h>

/* This file is autogenerated by pemutils/scripts/overflow_gen.py
 * All edits will be deleted. */

%s

#endif /* PEMUTIL_OVERFLOW_H_ */"""

def h_text(funcs):
    return H_TEXT % ("\n".join(funcs))

ADD_FUNCTION_HEADER = "bool add_overflow_%s(%s x, %s y);"

def add_function_header(var_name, type_name):
    return ADD_FUNCTION_HEADER % (var_name, type_name, type_name)

names = [(True, "int8", "int8_t"), (True, "int16", "int16_t"),
         (True, "int32", "int32_t"), (True, "int64", "int64_t"),
         (False, "uint8", "uint8_t"), (False, "uint16", "uint16_t"),
         (False, "uint32", "uint32_t"), (False, "uint64", "uint64_t"),
         (True, "schar", "signed char"), (False, "uchar", "unsigned char"),
         (True, "shrt", "short"), (False, "ushrt", "unsigned short"),
         (True, "int", "int"), (False, "uint", "unsigned int"),
         (True, "long", "long"), (False, "ulong", "unsigned long"),
         (True, "llong", "long long"), (False, "ullong", "unsigned long long"),
         (False, "size", "size_t")]

def min_max_names(var_name):
    return "%s_MIN" % var_name.upper(), "%s_MAX" % var_name.upper()

def main():
    if len(sys.argv) != 3:
        print ("%s requires two arguments: target .h file and target .c file" %
               sys.argv[0])
        exit(1)

    target_h, target_c = sys.argv[1], sys.argv[2]

    with open(target_h, "w+") as fp:
        funcs = []
        for (_, var_name, type_name) in names:
            funcs.append(add_function_header(var_name, type_name))

        funcs.append("")

        for (_, var_name, type_name) in names:
            funcs.append(mult_function_header(var_name, type_name))

        fp.write(h_text(funcs))

    with open(target_c, "w+") as fp:
        funcs = []
        for (is_signed, var_name, type_name) in names:
            min_name, max_name = min_max_names(var_name)
            if is_signed:
                body = add_signed_body(min_name, max_name)
            else:
                body = add_unsigned_body(min_name, max_name)
            funcs.append(add_function_wrapper(var_name, type_name, body))

        fp.write(c_text(funcs))

main()
